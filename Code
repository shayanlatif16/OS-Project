#include <iostream>
#include <thread>
#include <mutex>
#include <condition_variable>
#include <vector>
#include <queue>
#include <chrono>

using namespace std;

mutex mtx;
condition_variable cv_producer, cv_consumer;

queue<int> storage;
const int STORAGE_CAPACITY = 5;

int item_id = 0;

void producer(int id) {
    while (true) {
        unique_lock<mutex> lock(mtx);
        cv_producer.wait(lock, [] { return storage.size() < STORAGE_CAPACITY; });

        item_id++;
        storage.push(item_id);
        cout << "Producer " << id << " added item " << item_id << ". Storage size: " << storage.size() << endl;

        lock.unlock();
        cv_consumer.notify_all();
        this_thread::sleep_for(chrono::milliseconds(500));
    }
}

void consumer(int id) {
    while (true) {
        unique_lock<mutex> lock(mtx);
        cv_consumer.wait(lock, [] { return !storage.empty(); });

        int item = storage.front();
        storage.pop();
        cout << "Consumer " << id << " removed item " << item << ". Storage size: " << storage.size() << endl;

        lock.unlock();
        cv_producer.notify_all();
        this_thread::sleep_for(chrono::milliseconds(800));
    }
}

int main() {
    int num_producers = 2;
    int num_consumers = 3;

    vector<thread> producers, consumers;

    for (int i = 0; i < num_producers; ++i)
        producers.emplace_back(producer, i + 1);

    for (int i = 0; i < num_consumers; ++i)
        consumers.emplace_back(consumer, i + 1);

    for (auto& t : producers) t.join();
    for (auto& t : consumers) t.join();

    return 0;
}
